{"openapi":"3.1.0","info":{"title":"WattTime Data API","summary":"If you're looking for the legacy APIv2 documentation, you'll find it [here](https://legacy-docs.watttime.org).","version":"V3","x-logo":{"url":"WattTime-logo-2023-black-1920px_wpad.png","backgroundColor":"#F6F6F6","altText":"WattTime Logo"}},"servers":[{"url":"https://api.watttime.org","description":"WattTime Base API"}],"paths":{"/register":{"post":{"tags":["Authentication"],"summary":"Register New User","description":"Provide basic information to self-register for an account.\n\n**Note:** The `/register` endpoint accepts the parameters in the body of the request. It does not accept them in the URL as a query string, because that isn't as secure. The input parameters should be included as a JSON object (in the body), as shown in the sample code on the right.","operationId":"post_username_register_post","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string","description":"name of user that will be used in subsequent calls","title":"Username"},"description":"name of user that will be used in subsequent calls","example":"freddo"},{"name":"password","in":"query","required":true,"schema":{"type":"string","description":"user password. Password must be at least 8 characters, with at least 1 of each alpha, number and special characters.","title":"Password"},"description":"user password. Password must be at least 8 characters, with at least 1 of each alpha, number and special characters.","example":"the_frog"},{"name":"email","in":"query","required":true,"schema":{"type":"string","format":"email","description":"valid email address. The email address used to register will only be used for communication regarding API outages and updates. The email address will not be shared or used for any other promotional purpose. For others in your organization who would like these updates, they can subscribe to our Status Page.","title":"Email"},"description":"valid email address. The email address used to register will only be used for communication regarding API outages and updates. The email address will not be shared or used for any other promotional purpose. For others in your organization who would like these updates, they can subscribe to our Status Page.","example":"freddo@frog.org"},{"name":"org","in":"query","required":false,"schema":{"anyOf":[{"type":"string"},{"type":"null"}],"description":"organization name","title":"Org"},"description":"organization name","example":"freds world"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegisterResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"x-codeSamples":[{"lang":"Python","source":"\n# To register, use the code below. Please note that for these code examples we are using filler values for username\n# (freddo), password (the_frog), email (freddo@frog.org), org (freds world) and you should replace each if you are\n# copying and pasting this code.\n\nimport requests\nregister_url = 'https://api.watttime.org/register'\nparams = {'username': 'freddo',\n         'password': 'the_frog',\n         'email': 'freddo@frog.org',\n         'org': 'freds world'}\nrsp = requests.post(register_url, json=params)\nprint(rsp.text)\n","label":"Python"}]}},"/login":{"get":{"tags":["Authentication"],"summary":"Login & Obtain Token","description":"Use HTTP basic auth to exchange username and password for an access token. Remember that you need to include this token in an authorization bearer header for all subsequent data calls. This header has the form: `Authorization: Bearer <your_token>`\n\n**Note:** Token expires after 30 minutes. If a data call returns `HTTP 401` error code, you will need to call `/login` again to receive a new token.","operationId":"get_token_login_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginResponse"}}}}},"x-codeSamples":[{"lang":"Python","source":"\n# To login and obtain an access token, use this code:\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\nlogin_url = 'https://api.watttime.org/login'\nrsp = requests.get(login_url, auth=HTTPBasicAuth('freddo', 'the_frog'))\nTOKEN = rsp.json()['token']\nprint(rsp.json())\n","label":"Python"}]}},"/password":{"get":{"tags":["Authentication"],"summary":"Password Reset","description":"Provide your `username` to request an email be sent to you with password reset instructions.","operationId":"get_password_password_get","parameters":[{"name":"username","in":"query","required":true,"schema":{"type":"string","description":"name of user that will be used in subsequent calls","title":"Username"},"description":"name of user that will be used in subsequent calls","example":"freddo"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PasswordResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"x-codeSamples":[{"lang":"Python","source":"\n# To reset your password, use this code:\n\nimport requests\npassword_url = 'https://api.watttime.org/password/?username=freddo'\nrsp = requests.get(password_url)\nprint(rsp.json())\n","label":"Python"}]}},"/v3/region-from-loc":{"get":{"tags":["GET Regions and Maps"],"summary":"Determine Grid Region","description":"Emissions intensity varies by location, specifically the location where an energy-using device is interconnected to the grid. This endpoint, provided with latitude and longitude parameters, returns the details of the grid region serving that location, if known, or a Coordinates not found error if the point lies outside of known/covered regions.","operationId":"get_reg_loc_v3_region_from_loc_get","parameters":[{"name":"signal_type","in":"query","required":true,"schema":{"enum":["co2_moer","co2_aoer","health_damage"],"type":"string","description":"signal_type for which to look up region","title":"Signal Type"},"description":"signal_type for which to look up region","example":"co2_moer"},{"name":"latitude","in":"query","required":true,"schema":{"type":"number","description":"Latitude of desired location","title":"Latitude"},"description":"Latitude of desired location","example":-72.519},{"name":"longitude","in":"query","required":true,"schema":{"type":"number","description":"Longitude of desired location","title":"Longitude"},"description":"Longitude of desired location","example":42.372}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegionLocResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"x-codeSamples":[{"lang":"Python","source":"\nimport requests\n\nurl = \"https://api.watttime.org/v3/region-from-loc\"\n\n# Provide your TOKEN here, see https://docs.watttime.org/#tag/Authentication/operation/get_token_login_get for more information\nTOKEN = \"\"\nheaders = {\"Authorization\": f\"Bearer {TOKEN}\"}\nparams = {\"latitude\": \"42.372\", \"longitude\": \"-72.519\", \"signal_type\": \"co2_moer\"}\nresponse = requests.get(url, headers=headers, params=params)\nresponse.raise_for_status()\nprint(response.json())\n","label":"Python"}]}}},"components":{"schemas":{"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"LoginResponse":{"properties":{"token":{"type":"string","title":"Token"}},"type":"object","required":["token"],"title":"LoginResponse","example":{"token":"abcdef0123456789fedcabc"}},"PasswordResponse":{"properties":{"ok":{"type":"string","title":"Ok"}},"type":"object","required":["ok"],"title":"PasswordResponse","example":{"ok":"Please check your email for the password reset link"}},"RegionLocResponse":{"properties":{"region":{"type":"string","title":"Region"},"region_full_name":{"type":"string","title":"Region Full Name"},"signal_type":{"type":"string","title":"Signal Type"}},"type":"object","required":["region","region_full_name","signal_type"],"title":"RegionLocResponse","example":{"region":"ISONE_WCMA","region_full_name":"ISONE Western/Central Massachusetts","signal_type":"co2_moer"}},"RegisterResponse":{"properties":{"user":{"type":"string","title":"User"},"ok":{"type":"string","title":"Ok"}},"type":"object","required":["user","ok"],"title":"RegisterResponse","example":{"ok":"User created","user":"freddo"}},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}},"tags":[{"name":"Introduction","description":"The WattTime API provides access to real-time, forecast, and historical data for electric grids around the world, including marginal emissions data. For the different signals we provide, see the [data signals page](https://www.watttime.org/data-signals).\n\nIf you’re curious about what you can do with this data, [see the solutions we support](https://www.watttime.org/), where you can dive into the various use cases. A common example of how to use the MOER value is to schedule load at the cleanest times of day.\n\nYou can access the API by sending standard HTTP requests to the endpoints listed below. The `/v3/historical`, `/v3/forecast`, and `/v3/maps` endpoints are only available to subscribers. However, if you don’t yet have a subscription, you can preview all of the available region-specific data by providing `CAISO_NORTH` as the region for your requests. A comparison of the different available data plans can be found [here](https://www.watttime.org/docs-dev/data-plans/).\n\nPython3 example code is provided in the right pane of this documentation which shows how to interact with the API endpoints. For an example python script that pulls everything together, please see our example code on GitHub <link to new code>.\n\n## Restrictions\n\nThere is a strict limit on the rate at which you may query the API. From any user, we allow a maximum of 3,000 requests in any 5-minute rolling window (an average of 10 requests per second). If requests exceed this, an `HTTP 429` error code is returned.\n\n**The API rate limit is 3,000 requests in 5 minutes (an average of 10 per second).**\n\n## API Status Page and User Alerts\n\nWattTime publishes the current and historical uptime on the [API Status Page](https://status.watttime.org/). This page shows upcoming scheduled maintenance and provides updates during outages or maintenance. Users should subscribe to alerts via the status page to be kept up to date. This page is our method of communicating updates to our users related to maintenance, outages, and announcements related to version upgrades. Follow these instructions to subscribe to alerts:\n1. Navigate to the [WattTime API Status Page](https://status.watttime.org/)\n1. Click the 'subscribe to updates' button in the top right corner\n1. Select your preferred means of notification (email, SMS, Slack, webhook)\n1. Enter your contact information (this will not be used for any other purpose)\n\n## Best Practices for API Usage\nIf using this API to control many smart devices in different locations, we suggest the following protocol. For each device location, use GPS lat/lon to query `/v3/region-from-loc` in order to determine the region for the desired `signal_type`. Then, query the other endpoints (e.g. `/v3/forecast`, `/v3/historical`, etc.) with the resulting region to receive signal data.\n\nBecause grid region boundaries are occasionally updated, it is important to re-query `/v3/region-from-loc` at least once a month to ensure devices are receiving the signal corresponding to their location. The `/v3/maps` endpoint provides a GeoJSON that can be used for offline geocoding. The GeoJSON file includes a `last_updated` field that changes whenever the grid regions change.\n"},{"name":"Authentication","description":"To start using the API, first register for an account by using the `/register` endpoint. Then use the `/login` endpoint to obtain an access token. You can then use your token to access the remainder of our endpoints. You must include your token in an authorization (bearer) header in subsequent requests to retrieve data. Your access token will expire after 30 minutes and you'll need to sign in again to obtain a new one."},{"name":"GET Account Access"},{"name":"GET Regions and Maps"},{"name":"GET Forecast"},{"name":"GET Historical"},{"name":"Transitioning from APIv2 to APIv3","description":"We're excited to upgrade our API after about 5 years on the same version. We don't undertake this lightly, and endeavor to avoid breaking changes whenever possible. We think the upgrades we've made available in API v3 will be well worth the effort to update your code, and we're happy to support you as you make the transition. Please contact us with questions, support@WattTime.org.\n\nAfter an overview including a description of miscellaneous changes, the rest of this guide is meant to help you translate your existing v2 requests into their respective v3 requests and handle any differences in the responses that come back.\n\n# Overview\n\nAt a high level, the biggest change between v2 and v3 is a disambiguation of the `/v2/data` endpoint – since these data\nare best used in historical analysis rather than real-time optimization, we're now housing these data in the\n`/v3/historical` endpoint.\n\n\nThe `/v3/forecast` endpoint continues to provide forecast data for real time optimization, across a number of different signal types. There is now a dedicated `/v3/forecast/historical` endpoint for gathering historical forecasts for retrospective analyses.\n\nWattTime is adding support for a number of new signal types, including: `health_damage` (both forecast and historical), and `co2_aoer` (historical only, for accounting purposes). WattTime's marginal operating emissions rate has been named `co2_moer` to disambiguate from other signals with equivalent units.\n\nMost query responses will now contain two stanzas: `data` and `meta`. The content in `data` includes point times, values, and optional pointwise metadata related to the filtering criteria provided in a request. The content in `meta` describes the returned data, including any potential warnings or issues encountered.\n\nGeographic regions were formerly identified as `abbrev` and `ba` (for balancing authority), and in v3 will be known as `region` (which is inclusive of balancing authorities, subregions, and international nomenclature). `region` is also a unique identifier across all endpoints.\n\nGoing forward, new regions will only be added to v3. With the introduction of v3, we're also releasing `co2_moer` data in 12 new countries comprising 21 new regions total.\n\nWhere in the past a user could request data from `/v2/data` using GPS lat/long as inputs, the `/v3/historical` endpoint now accepts only the region parameter as input to define the location.\n\nTime zones are now required on all user-provided timestamps. Previously in v2 if timestamps lacked time zone information, UTC was assumed. That must now be made explicit in v3 in the request.\n\nSignificantly, our model versioning semantics are now date based. This is a change from the V2 API, where model versioning differed between signal types and endpoints. In the V2 API, model versions for the MOER signal type were represented as decimals (i.e. `2.0`, `3.0`, `3.2`) while forecast model versions were semantically linked to the MOER data they were forecasting (i.e. `3.2-1.0.0`). With the introduction of new signal types and modeling methodologies, WattTime is shifting towards date-based versioning to remove some confusion around the significance of model version names. Model versions across all endpoints in the V3 API are dates (i.e. `2022-12-31`), which represent the approximate end of sample data used to train that model. When a new model version is released, it may indicate that the model was trained on more recent data (which is necessary as the power grid transitions to renewable fuel types), or as WattTime develops new methodologies that improve the accuracy of our signals. To learn more about the various methodologies used in each grid region, see here <link to model types page>.\n\n\n# v2/register\nThe URL is the only update to this endpoint.\n### v2 URL\n`https://api2.watttime.org/v2/register`\n### v3 URL\n`https://api.watttime.org/register`\n\n# v2/login\nThe URL is the only update to this endpoint.\n### v2 URL\n`https://api2.watttime.org/v2/login`\n### v3 URL\n`https://api.watttime.org/login`\n\n# v2/password\nThe URL is the only update to this endpoint.\n### v2 URL\n`https://api2.watttime.org/v2/password`\n### v3 URL\n`https://api.watttime.org/password`\n\n# v2/ba-from-loc\n\nFormerly known as `ba` and `abbrev`, regions are now identified by the `region` parameter which is also the natural key in API v3 (the `id` in the v2 response has been retired). Accordingly, the URL now reflects that language change (using `.../region-from-loc`). This endpoint now also requires a `signal_type` input parameter as there can be differences in grid regions depending on the type of data you are accessing.\n\n\n### v2 request:\n```python\nurl = 'https://api2.watttime.org/v2/ba-from-loc'\nparams = {\"latitude\": \"42.372\", \"longitude\": \"-72.519\"}\n```\n\n### v2 response:\n```json\n{\n    \"id\": 169,\n    \"abbrev\": \"ISONE_WCMA\",\n    \"name\": \"ISONE Western/Central Massachusetts\"\n}\n```\n\n### v3 request\n```python\nurl = 'https://api.watttime.org/v3/region-from-loc'\nparams = {\"latitude\": \"42.372\", \"longitude\": \"-72.519\", \"signal_type\": \"co2_moer\"}\n```\n\n### v3 response:\n```json\n{\n    \"region\": \"ISONE_WCMA\",\n    \"region_full_name\": \"ISONE Western/Central Massachusetts\",\n    \"signal_type\": \"co2_moer\"\n}\n```\n\n# v2/ba-access\n\nThis endpoint provided a list of available regions and could be filtered to the subset accessible by the authenticated account. The new v3 endpoint provides a more comprehensive guide to what is available for your account on the API. It provides a hierarchical JSON output that describes the signals, regions, endpoints, models and any available associated metadata for available data (in that hierarchical order).\n\n### v2 request:\n```python\nurl = 'https://api2.watttime.org/v2/ba-access'\nparams = {\"all\": \"false\"}\n```\n\n### v2 response:\n```json\n{\n  \"ba\": \"CAISO_NORTH\",\n  \"name\": \"California ISO Northern\",\n  \"access\": true,\n  \"datatype\": \"MOER\"\n}\n```\n\n### v3 request\n```python\nurl = 'https://api.watttime.org/v3/my-access'\nparams = {}\n```\n\n### v3 response:\n```json\n{\n  \"signal_types\": [\n    {\n      \"signal_type\": \"co2_moer\",\n      \"regions\": [\n        {\n          \"region\": \"PJM_NJ\",\n          \"region_full_name\": \"PJM New Jersey\",\n          \"parent\": \"PJM\",\n          \"data_point_period_seconds\": 300,\n          \"endpoints\": [\n            {\n              \"endpoint\": \"v3/forecast\",\n              \"models\": [\n                {\n                  \"model\": \"2023-08-24\",\n                  \"data_start\": \"2021-08-24\",\n                  \"train_start\": \"2021-08-24\",\n                  \"train_end\": \"2021-08-24\"\n                }\n              ]\n            },\n            {\n              \"endpoint\": \"v3/historical\",\n              \"models\": [\n                {\n                  \"model\": \"2023-08-24\",\n                  \"data_start\": \"2021-08-24\",\n                  \"train_start\": \"2021-08-24\",\n                  \"train_end\": \"2021-08-24\",\n                  \"type\": \"binned_regression\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n\n# v2/index\nThis endpoint provides the most recent marginal carbon intensity value for the local grid. It provided either a percentile value, a raw MOER value, or both, depending on the request parameters. Since there are two types of data available from this endpoint, we'll address the differences for each separately.\n\n## v2/index, 'style': 'percent'\nWattTime is still gathering input on how this feature might be included in v3.\n\n## v2/index, 'style': 'moer'\n`'style': 'moer'` is replaced by `\"signal_type\": \"co2_moer\"` in the request parameters.\n\n### v2/index request for MOER value:\n\n```python\nurl = 'https://api2.watttime.org/index'\nparams = {'ba': 'CAISO_NORTH', 'style': 'moer'}\n```\nThere are two options for how you translate this v2 request to v3. You can get recent data from the /historical endpoint (higher accuracy, slightly older), or you can request the first point of the forecast (guaranteed to be less than 5 minutes old for `co2_moer`, lower accuracy).\n\n### v3 request for MOER value from v3/historical:\n\n```python\nurl = \"https://api.watttime.org/v3/historical\"\nparams = {\n    \"region\": \"CAISO_NORTH\",\n    \"start\": \"2022-07-15T00:00+00:00\",\n    \"end\": \"2022-07-15T00:05+00:00\",\n    \"signal_type\": \"co2_moer\",\n}\n```\n\n### v3 request for MOER value from v3/forecast:\n\n```python\nurl = \"https://api.watttime.org/v3/forecast\"\nparams = {\n    \"region\": \"CAISO_NORTH\",\n    \"signal_type\": \"co2_moer\",\n    \"horizon_hours: 0,\n}\n```\n\n# v2/data\nThis endpoint was used to obtain historical MOER data (e.g. CO2 lbs/MWh) for a specified grid region or location (latitude & longitude pair). Since this request was meant for historical data, in v3 we're making all “historical” data available from an endpoint called `historical`. Also, in v3, we've eliminated the option to use lat/lon here, so you'll need to first determine the region and use that as an input parameter here. In v2, if the optional parameters `starttime` and `endtime` were omitted, the response would contain the latest available value. In v3, the `start` and `end` parameters are required.\n\n### v2 request\n```python\nurl = 'https://api2.watttime.org/v2/data'\nparams = {\n    'ba': 'CAISO_NORTH',\n    'starttime': '2022-11-16T20:30:00-0800',\n    'endtime': '2022-11-16T20:45:00-0800'\n}\n```\n\n### v3 request\n```python\nurl = 'https://api.watttime.org/v3/historical'\nparams = {\n    \"region\": \"CAISO_NORTH\",\n    \"start\": \"2022-07-15T00:00+00:00\",\n    \"end\": \"2022-07-15T00:05+00:00\",\n    \"signal_type\": \"co2_moer\",\n}\n```\n\n# v2/historical\nThis endpoint provided a zip file containing monthly .csv files with the MOER values (e.g. CO2 lbs/MWh) and timestamps for a requested region for the past two years or more. You can still get historical data using the new historical endpoint, and using the required parameters `start`, `end`, and `signal_type`.\n\nThe response is the biggest difference here. We've retired this csv output feature in favor of standardizing on the JSON response type. The request to `/v3/historical` is limited to 32 days per request. We've developed an SDK that you can use to pull data in larger chunks than just one month at a time, and translate the data into various formats. If you're still having trouble getting the data in the format you'd like, please contact support@watttime.org for assistance.\n\n### v2 request\n```python\nurl = 'https://api2.watttime.org/v2/historical'\nparams = {\n    'ba': 'CAISO_NORTH',\n}\n```\n\n### v3 request\n```python\nurl = 'https://api.watttime.org/v3/historical'\nparams = {\n    \"region\": \"CAISO_NORTH\",\n    \"start\": \"2022-07-15T00:00+00:00\",\n    \"end\": \"2022-07-15T00:05+00:00\",\n    \"signal_type\": \"co2_moer\",\n}\n```\n\n# v2/forecast\n\nThis endpoint provided a forecast of the MOERs (e.g. CO2 lbs/MWh) for a specified region, by default the latest forecast was returned. The `/v3/forecast` endpoint is now used solely to get the most recent available forecast, the response is simplified because it only returns one set of forecast values. In v2, a 72-hour forecast could be requested using the optional parameter `extended_forecast` and in v3 you can request the specific length of `forecast_horizon` that you’d like from 0-72 hours.\n\n### v2 request (latest forecast)\n```python\nurl = 'https://api2.watttime.org/v2/forecast'\nparams = {\n    'ba': 'CAISO_NORTH',\n    'extended_forecast': 'True',\n}\n```\n\n### v3 request (latest forecast)\n```python\nurl = 'https://api.watttime.org/v3/forecast'\nparams = {\n    \"region\": \"CAISO_NORTH\",\n    \"signal_type\": \"co2_moer\",\n    \"horizon_hours\": 72,\n}\n```\n\nIn v2, a batch of historical forecasts could be requested using the optional parameters `starttime` and `endtime` to bound the `generated_at` time. In v3, we’ve moved this request to a new endpoint and the response is a similar but nested version of the v3/forecast response since it is designed for returning multiple sets of forecasts, one for each `generated_at` time.\n\n### v2 request (historical forecast)\n```python\nurl = \"https://api2.watttime.org/v2/forecast\"\nparams = {\n    \"ba\": \"CAISO_NORTH\",\n    \"starttime\": \"2023-07-15T00:00+00:00\",\n    \"endtime\": \"2023-07-15T00:05+00:00\",\n}\n```\n\n### v3 request (historical forecast)\n```python\nurl = \"https://api.watttime.org/v3/forecast/historical\"\nparams = {\n    \"region\": \"CAISO_NORTH\",\n    \"signal_type\": \"co2_moer\",\n    \"start\": \"2023-07-15T00:00+00:00\",\n    \"end\": \"2023-07-15T00:05+00:00\",\n}\n```\n\n# v2/maps\nThis endpoint provided a GeoJSON of the grid region boundary for all regions that WattTime covers globally. The biggest change here besides the URL, is that a `signal_type` is now required in the request since there are different maps for each. The response also includes the `signal_type` and is otherwise identical to the v2 response.\n\n### v2 request\n```python\nurl = \"https://api2.watttime.org/v2/maps\"\n```\n\n### v3 request\n```python\nurl = \"https://api.watttime.org/v3/maps\"\nparams = {\n    \"signal_type\": \"co2_moer\",\n}\n```\n\n# v2/avgemissions\n\nAverage emissions have been rolled into the standard data path under the signal_type `co2_aoer`. The request and response schema otherwise matches the above schema for v3/historical data. In order to distinguish between the default model (full quality) and the backup model (imputed, lower quality) data points, there is a new query parameter `include_imputed_marker` that will provide a point-wise indication in the response of data points that were generated with imputed data (`imputed_data_used=true`, equivalent to the old `3.0-modeled` version).\n\n### v2 request\n```python\nurl = \"https://api2.watttime.org/v2/avgemissions\"\nparams = {\n    \"ba\": \"CAISO_NORTH\",\n}\n```\n\n### v3 request\n```python\nurl = \"https://api.watttime.org/v3/historical\"\nparams = {\n    \"region\": \"CAISO\",\n    \"signal_type\": \"co2_aoer\",\n    \"start\": \"2023-07-15T00:00+00:00\",\n    \"end\": \"2023-07-15T00:05+00:00\",\n    \"include_imputed_marker\": True,\n}\n```\n"},{"name":"Technical Support","description":"For technical questions related to this API and real-time emissions data, please contact support@WattTime.org\n\nIf you are experiencing an outage, please check the WattTime API Status Page to get the status of known outages, and if none are shown, please proceed to contact support@WattTime.org\n\n✅ **For the fastest resolution of your issue, please also include the following along with your inquiry:**\n* HTTP error codes received\n* The code snippet for your query/API request\n* Any relevant screen capture images\n* A short description of what you are trying to accomplish\n* Is this the first attempt? Or, a new error for something that used to work?\n"}]}
