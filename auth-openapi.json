{
  "openapi": "3.1.0",
  "info": {
    "title": "WattTime Data API",
    "version": "V3"
  },
  "servers": [
    {
      "url": "https://api.watttime.org",
      "description": "WattTime Base API"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register New User",
        "description": "Provide basic information to self register for an account.",
        "operationId": "post_username_register_post",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "name of user that will be used in subsequent calls",
              "title": "Username"
            },
            "description": "name of user that will be used in subsequent calls",
            "example": "freddo"
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "user password. Password must be at least 8 characters, with at least 1 of each alpha, number and special characters.",
              "title": "Password"
            },
            "description": "user password. Password must be at least 8 characters, with at least 1 of each alpha, number and special characters.",
            "example": "the_frog"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email",
              "description": "valid email address. The email address used to register will only be used for communication regarding API outages and updates. The email address will not be shared or used for any other promotional purpose. For others in your organization who would like these updates, they can subscribe to our Status Page. ",
              "title": "Email"
            },
            "description": "valid email address. The email address used to register will only be used for communication regarding API outages and updates. The email address will not be shared or used for any other promotional purpose. For others in your organization who would like these updates, they can subscribe to our Status Page. ",
            "example": "freddo@frog.org"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "organization name",
              "title": "Org"
            },
            "description": "organization name",
            "example": "freds world"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# To register, use the code below. Please note that for these code examples we are using filler values for username\n# (freddo), password (the_frog), email (freddo@frog.org), org (freds world) and you should replace each if you are\n# copying and pasting this code.\n\nimport requests\nregister_url = 'https://api.watttime.org/register'\nparams = {'username': 'freddo',\n         'password': 'the_frog',\n         'email': 'freddo@frog.org',\n         'org': 'freds world'}\nrsp = requests.post(register_url, json=params)\nprint(rsp.text)\n",
            "label": "Python"
          }
        ]
      }
    },
    "/login": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login & Obtain Token",
        "description": "Use HTTP basic auth to exchange username and password for an access token. Remember that you need to include this token in an authorization bearer header for all subsequent data calls. This header has the form: `Authorization: Bearer <your_token>`",
        "operationId": "get_token_login_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# To register, use the code below. Please note that for these code examples we are using filler values for username\n# (freddo), password (the_frog), email (freddo@frog.org), org (freds world) and you should replace each if you are\n# copying and pasting this code.\n\nimport requests\nregister_url = 'https://api.watttime.org/register'\nparams = {'username': 'freddo',\n         'password': 'the_frog',\n         'email': 'freddo@frog.org',\n         'org': 'freds world'}\nrsp = requests.post(register_url, json=params)\nprint(rsp.text)\n",
            "label": "Python"
          }
        ]
      }
    },
    "/password": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Reset",
        "description": "Provide your username to request an email be sent to you with password reset instructions.",
        "operationId": "get_password_password_get",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "name of user that will be used in subsequent calls",
              "title": "Username"
            },
            "description": "name of user that will be used in subsequent calls",
            "example": "freddo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# To reset your password, use this code:\n\nimport requests\npassword_url = 'https://api.watttime.org/password/?username=freddo'\nrsp = requests.get(password_url)\nprint(rsp.json())\n",
            "label": "Python"
          }
        ]
      }
    },
    "/v3/region-from-loc": {
      "get": {
        "tags": [
          "Regions and Maps"
        ],
        "summary": "Determine Grid Region",
        "description": "Emissions intensity varies by location, specifically the location where an energy-using device is interconnected to the grid. This endpoint, provided with latitude and longitude parameters, returns the details of the grid region serving that location, if known, or a Coordinates not found error if the point lies outside of known/covered regions.",
        "operationId": "get_reg_loc_v3_region_from_loc_get",
        "parameters": [
          {
            "name": "signal_type",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "co2_moer",
                "co2_aoer",
                "health_damage"
              ],
              "type": "string",
              "description": "signal_type for which to look up region",
              "title": "Signal Type"
            },
            "description": "signal_type for which to look up region",
            "example": "co2_moer"
          },
          {
            "name": "latitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Latitude of desired location",
              "title": "Latitude"
            },
            "description": "Latitude of desired location",
            "example": -72.519
          },
          {
            "name": "longitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Longitude of desired location",
              "title": "Longitude"
            },
            "description": "Longitude of desired location",
            "example": 42.372
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionLocResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# Make sure to replace the parameters username (e.g. ‘freddo’) and password (e.g. ‘the_frog’) with your registered\n# credentials when using this code. You should not add in your token here. The code automatically generates a new token\n# each time you run it.\n\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nlogin_url = 'https://api.watttime.org/login'\ntoken = requests.get(login_url, auth=HTTPBasicAuth(‘freddo’, ‘the_frog’)).json()['token']\n\nregion_url = 'https://api.watttime.org/v3/region-from-loc'\nheaders = {'Authorization': 'Bearer {}'.format(token)}\nparams = {'latitude': '42.372', 'longitude': '-72.519', 'signal_type': 'co2_moer'}\nrsp=requests.get(region_url, headers=headers, params=params)\nprint(rsp.text)\n",
            "label": "Python"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "LoginResponse",
        "example": {
          "token": "abcdef0123456789fedcabc"
        }
      },
      "PasswordResponse": {
        "properties": {
          "ok": {
            "type": "string",
            "title": "Ok"
          }
        },
        "type": "object",
        "required": [
          "ok"
        ],
        "title": "PasswordResponse",
        "example": {
          "ok": "Please check your email for the password reset link"
        }
      },
      "RegionLocResponse": {
        "properties": {
          "abbrev": {
            "type": "string",
            "title": "Abbrev"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "signal_type": {
            "type": "string",
            "title": "Signal Type"
          }
        },
        "type": "object",
        "required": [
          "abbrev",
          "name",
          "signal_type"
        ],
        "title": "RegionLocResponse",
        "example": {
          "abbrev": "ISONE_WCMA",
          "name": "ISONE Western/Central Massachusetts",
          "signal_type": "co2_moer"
        }
      },
      "RegisterResponse": {
        "properties": {
          "user": {
            "type": "string",
            "title": "User"
          },
          "ok": {
            "type": "string",
            "title": "Ok"
          }
        },
        "type": "object",
        "required": [
          "user",
          "ok"
        ],
        "title": "RegisterResponse",
        "example": {
          "ok": "User created",
          "user": "freddo"
        }
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "Introduction",
      "description": "WattTime technology—based on real-time grid data, cutting-edge algorithms, and machine learning—provides first-of-its-kind insight into your local electricity grid’s marginal emissions rate.\n\nThe WattTime API provides access to real-time, forecast, and historical data for electric grids around the world, including marginal emissions data.\n\nFor the different signals we provide, see the <data signals page>. If you’re curious about what you can do with this data, see the solutions we support <link to homepage or solutions>, where you can dive into the various use cases. A common example of how to use the MOER value is to schedule load at the cleanest time of day.\n\nYou can access the API by sending standard HTTP requests to the endpoints listed below. The `/v3/historical`, `/v3/forecast`, and `/v3/maps` endpoints are only available to subscribers. However, if you don’t yet have a subscription, you can preview all of the available region-specific data by providing `CAISO_NORTH` as the region for your requests. A comparison of the different available data plans can be found here <Link to new plan page>.\n\nPython3 example code is provided in the right pane of this documentation which shows how to interact with the API endpoints. For an example python script that pulls everything together, please see our example code on GitHub <link to new code>.\n\n## Restrictions\n\nThere is a strict limit on the rate at which you may query the API. From any user, we allow a maximum of 3,000 requests in any 5-minute rolling window (an average of 10 requests per second). If requests exceed this, an HTTP 429 error code is returned.\n\n**The API rate limit is 3,000 requests in 5 minutes (an average of 10 per second).**\n\n## API Status Page and User Alerts\n\nWattTime publishes the current and historical uptime on the [API Status Page](https://status.watttime.org/). This page shows upcoming scheduled maintenance and provides updates during outages or maintenance. Users should subscribe to alerts via the status page to be kept up to date. This page is our method of communicating updates to our users related to maintenance, outages, and announcements related to version upgrades. Follow these instructions to subscribe to alerts:\n1. Navigate to the [WattTime API Status Page](https://status.watttime.org/)\n1. Click the 'subscribe to updates' button in the top right corner\n1. Select your preferred means of notification (email, SMS, Slack, webhook)\n1. Enter your contact information (this will not be used for any other purpose)\n\n## Best Practices for API Usage\nIf using this API to control many smart devices in different locations, we suggest the following protocol. For each device location, use gps lat/lon to query `/v3/region-from-loc` in order to determine the region for the desired signal_type. Then, query the other endpoints (e.g. `/v3/forecast`, `/v3/historical`, etc.) with the resulting region to receive signal data.\n\nBecause grid region boundaries are occasionally updated, it is important to re-query `/region-from-loc` at least once a month to ensure devices are receiving the signal corresponding to their location. The `/v3/maps` endpoint provides a GeoJSON that can be used for offline geocoding. The GeoJSON file includes a `last_updated` field that changes whenever the grid regions change.\n\nFor companies using our API to support IoT products, we recommend registering an API account for use by a central service/cloud that redistributes information to each device as opposed to registering an account for each end-user’s unique device.\"\n"
    },
    {
      "name": "Authentication",
      "description": "To start using the API, first register for an account by using the /register endpoint. Then use the /login endpoint to obtain an access token. You can then use your token to access the remainder of our endpoints. You must include your token in an authorization (bearer) header in subsequent requests to retrieve data. Your access token will expire after 30 minutes and you'll need to sign in again to obtain a new one."
    },
    {
      "name": "Regions and Maps",
      "description": "lorem ipsum"
    }
  ]
}
