{
  "openapi": "3.1.0",
  "info": {
    "title": "WattTime Data API",
    "version": "V3",
    "x-logo": {
      "url": "https://www.watttime.org/api-documentation/images/logo-27870101.png",
      "backgroundColor": "#183B66",
      "altText": "WattTime Logo"
    }
  },
  "servers": [
    {
      "url": "https://api.watttime.org",
      "description": "WattTime Base API"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register New User",
        "description": "Provide basic information to self register for an account.",
        "operationId": "post_username_register_post",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "name of user that will be used in subsequent calls",
              "title": "Username"
            },
            "description": "name of user that will be used in subsequent calls",
            "example": "freddo"
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "user password. Password must be at least 8 characters, with at least 1 of each alpha, number and special characters.",
              "title": "Password"
            },
            "description": "user password. Password must be at least 8 characters, with at least 1 of each alpha, number and special characters.",
            "example": "the_frog"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email",
              "description": "valid email address. The email address used to register will only be used for communication regarding API outages and updates. The email address will not be shared or used for any other promotional purpose. For others in your organization who would like these updates, they can subscribe to our Status Page. ",
              "title": "Email"
            },
            "description": "valid email address. The email address used to register will only be used for communication regarding API outages and updates. The email address will not be shared or used for any other promotional purpose. For others in your organization who would like these updates, they can subscribe to our Status Page. ",
            "example": "freddo@frog.org"
          },
          {
            "name": "org",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "organization name",
              "title": "Org"
            },
            "description": "organization name",
            "example": "freds world"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# To register, use the code below. Please note that for these code examples we are using filler values for username\n# (freddo), password (the_frog), email (freddo@frog.org), org (freds world) and you should replace each if you are\n# copying and pasting this code.\n\nimport requests\nregister_url = 'https://api.watttime.org/register'\nparams = {'username': 'freddo',\n         'password': 'the_frog',\n         'email': 'freddo@frog.org',\n         'org': 'freds world'}\nrsp = requests.post(register_url, json=params)\nprint(rsp.text)\n",
            "label": "Python"
          }
        ]
      }
    },
    "/login": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login & Obtain Token",
        "description": "Use HTTP basic auth to exchange username and password for an access token. Remember that you need to include this token in an authorization bearer header for all subsequent data calls. This header has the form: `Authorization: Bearer <your_token>`",
        "operationId": "get_token_login_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# To register, use the code below. Please note that for these code examples we are using filler values for username\n# (freddo), password (the_frog), email (freddo@frog.org), org (freds world) and you should replace each if you are\n# copying and pasting this code.\n\nimport requests\nregister_url = 'https://api.watttime.org/register'\nparams = {'username': 'freddo',\n         'password': 'the_frog',\n         'email': 'freddo@frog.org',\n         'org': 'freds world'}\nrsp = requests.post(register_url, json=params)\nprint(rsp.text)\n",
            "label": "Python"
          }
        ]
      }
    },
    "/password": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Reset",
        "description": "Provide your username to request an email be sent to you with password reset instructions.",
        "operationId": "get_password_password_get",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "name of user that will be used in subsequent calls",
              "title": "Username"
            },
            "description": "name of user that will be used in subsequent calls",
            "example": "freddo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# To reset your password, use this code:\n\nimport requests\npassword_url = 'https://api.watttime.org/password/?username=freddo'\nrsp = requests.get(password_url)\nprint(rsp.json())\n",
            "label": "Python"
          }
        ]
      }
    },
    "/v3/region-from-loc": {
      "get": {
        "tags": [
          "Regions and Maps"
        ],
        "summary": "Determine Grid Region",
        "description": "Emissions intensity varies by location, specifically the location where an energy-using device is interconnected to the grid. This endpoint, provided with latitude and longitude parameters, returns the details of the grid region serving that location, if known, or a Coordinates not found error if the point lies outside of known/covered regions.",
        "operationId": "get_reg_loc_v3_region_from_loc_get",
        "parameters": [
          {
            "name": "signal_type",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "co2_moer",
                "co2_aoer",
                "health_damage"
              ],
              "type": "string",
              "description": "signal_type for which to look up region",
              "title": "Signal Type"
            },
            "description": "signal_type for which to look up region",
            "example": "co2_moer"
          },
          {
            "name": "latitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Latitude of desired location",
              "title": "Latitude"
            },
            "description": "Latitude of desired location",
            "example": -72.519
          },
          {
            "name": "longitude",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Longitude of desired location",
              "title": "Longitude"
            },
            "description": "Longitude of desired location",
            "example": 42.372
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionLocResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\n# Make sure to replace the parameters username (e.g. ‘freddo’) and password (e.g. ‘the_frog’) with your registered\n# credentials when using this code. You should not add in your token here. The code automatically generates a new token\n# each time you run it.\n\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nlogin_url = 'https://api.watttime.org/login'\ntoken = requests.get(login_url, auth=HTTPBasicAuth(‘freddo’, ‘the_frog’)).json()['token']\n\nregion_url = 'https://api.watttime.org/v3/region-from-loc'\nheaders = {'Authorization': 'Bearer {}'.format(token)}\nparams = {'latitude': '42.372', 'longitude': '-72.519', 'signal_type': 'co2_moer'}\nrsp=requests.get(region_url, headers=headers, params=params)\nprint(rsp.text)\n",
            "label": "Python"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "LoginResponse",
        "example": {
          "token": "abcdef0123456789fedcabc"
        }
      },
      "PasswordResponse": {
        "properties": {
          "ok": {
            "type": "string",
            "title": "Ok"
          }
        },
        "type": "object",
        "required": [
          "ok"
        ],
        "title": "PasswordResponse",
        "example": {
          "ok": "Please check your email for the password reset link"
        }
      },
      "RegionLocResponse": {
        "properties": {
          "abbrev": {
            "type": "string",
            "title": "Abbrev"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "signal_type": {
            "type": "string",
            "title": "Signal Type"
          }
        },
        "type": "object",
        "required": [
          "abbrev",
          "name",
          "signal_type"
        ],
        "title": "RegionLocResponse",
        "example": {
          "abbrev": "ISONE_WCMA",
          "name": "ISONE Western/Central Massachusetts",
          "signal_type": "co2_moer"
        }
      },
      "RegisterResponse": {
        "properties": {
          "user": {
            "type": "string",
            "title": "User"
          },
          "ok": {
            "type": "string",
            "title": "Ok"
          }
        },
        "type": "object",
        "required": [
          "user",
          "ok"
        ],
        "title": "RegisterResponse",
        "example": {
          "ok": "User created",
          "user": "freddo"
        }
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "Introduction",
      "description": "WattTime technology—based on real-time grid data, cutting-edge algorithms, and machine learning—provides first-of-its-kind insight into your local electricity grid’s marginal emissions rate.\n\nThe WattTime API provides access to real-time, forecast, and historical data for electric grids around the world, including marginal emissions data.\n\nFor the different signals we provide, see the <data signals page>. If you’re curious about what you can do with this data, see the solutions we support <link to homepage or solutions>, where you can dive into the various use cases. A common example of how to use the MOER value is to schedule load at the cleanest time of day.\n\nYou can access the API by sending standard HTTP requests to the endpoints listed below. The `/v3/historical`, `/v3/forecast`, and `/v3/maps` endpoints are only available to subscribers. However, if you don’t yet have a subscription, you can preview all of the available region-specific data by providing `CAISO_NORTH` as the region for your requests. A comparison of the different available data plans can be found here <Link to new plan page>.\n\nPython3 example code is provided in the right pane of this documentation which shows how to interact with the API endpoints. For an example python script that pulls everything together, please see our example code on GitHub <link to new code>.\n\n## Restrictions\n\nThere is a strict limit on the rate at which you may query the API. From any user, we allow a maximum of 3,000 requests in any 5-minute rolling window (an average of 10 requests per second). If requests exceed this, an HTTP 429 error code is returned.\n\n**The API rate limit is 3,000 requests in 5 minutes (an average of 10 per second).**\n\n## API Status Page and User Alerts\n\nWattTime publishes the current and historical uptime on the [API Status Page](https://status.watttime.org/). This page shows upcoming scheduled maintenance and provides updates during outages or maintenance. Users should subscribe to alerts via the status page to be kept up to date. This page is our method of communicating updates to our users related to maintenance, outages, and announcements related to version upgrades. Follow these instructions to subscribe to alerts:\n1. Navigate to the [WattTime API Status Page](https://status.watttime.org/)\n1. Click the 'subscribe to updates' button in the top right corner\n1. Select your preferred means of notification (email, SMS, Slack, webhook)\n1. Enter your contact information (this will not be used for any other purpose)\n\n## Best Practices for API Usage\nIf using this API to control many smart devices in different locations, we suggest the following protocol. For each device location, use gps lat/lon to query `/v3/region-from-loc` in order to determine the region for the desired signal_type. Then, query the other endpoints (e.g. `/v3/forecast`, `/v3/historical`, etc.) with the resulting region to receive signal data.\n\nBecause grid region boundaries are occasionally updated, it is important to re-query `/region-from-loc` at least once a month to ensure devices are receiving the signal corresponding to their location. The `/v3/maps` endpoint provides a GeoJSON that can be used for offline geocoding. The GeoJSON file includes a `last_updated` field that changes whenever the grid regions change.\n\nFor companies using our API to support IoT products, we recommend registering an API account for use by a central service/cloud that redistributes information to each device as opposed to registering an account for each end-user’s unique device.\"\n"
    },
    {
      "name": "Authentication",
      "description": "To start using the API, first register for an account by using the /register endpoint. Then use the /login endpoint to obtain an access token. You can then use your token to access the remainder of our endpoints. You must include your token in an authorization (bearer) header in subsequent requests to retrieve data. Your access token will expire after 30 minutes and you'll need to sign in again to obtain a new one."
    },
    {
      "name": "GET Forecast"
    },
    {
      "name": "GET Historical"
    },
    {
      "name": "Signal access"
    },
    {
      "name": "Regions and Maps"
    },
    {
      "name": "Transitioning from v2 to v3",
      "description": "﻿# Notes\nAt a high level, the biggest change between v2 and v3 is a disambiguation of the `/v2/data` endpoint – since these data\nare best used in historical analysis rather than real-time optimization, we’re now housing these data in the\n`/v3/historical` endpoint.\n\n\nThe `/v3/forecast` endpoint continues to provide forecast data for real time optimization, across a number of different signal types.\n\nWattTime is adding support for a number of new signal types, including: `health_damage` (both forecasted and historical), and `co2_aoer` (historical only, for accounting purposes). WattTime’s marginal operating emissions rate has been named `co2_moer` to disambiguate from other signals with equivalent units.\n\nMost query responses will now contain two stanzas: `data` and `meta`. The content in `data` includes point times, values, and optional pointwise metadata related to the filtering criteria provided in an array. The content in `meta` describes the returned data, including any potential warnings or issues encountered.\n\nWhere in the past a user could request data from `/v2/data` using GPS lat/long as inputs, the `/v3/historical` endpoint now accepts only the region parameter as input to define the location.\n\nTime zones are now required on all user-provided timestamps. Previously in v2 if timestamps lacked time zone information, UTC was assumed. That must now be made explicit in v3 in the request.\n\nThere are fairly significant changes to how model versions are expressed in both historical data and forecasted data. WattTime is shifting towards date-based modeling to remove some confusion around the significance of model versions. WattTime uses one of a set of models depending on what data is available for a given region, and the model type is now expressed in the meta stanza of a response. Learn more about the various model types here <link to model types page>.\n\n# Forecast\nThe `/v3/forecast` endpoint provides the currently applicable forecast. The response has been simplified compared to v2.\n\nThe first point of a forecast in the v3 schema holds data that applies to the current time period, aka the real-time data point. This endpoint is guaranteed to return data in all cases, including if data is missing upstream, and therefore should be relied on exclusively for real-time services like optimization.\n\nHistorical forecasts (forecasts generated at times in the past) are accessible via the `/v3/forecast/historical` endpoint, which is described in further detail below.\n### From (v2 schema):\n```json\n[\n  {\n    \"generated_at\": \"2022-12-19T18:50:00+00:00\",\n    \"forecast\":\n      [\n        {\n          \"point_time\": \"2022-12-19T18:55:00+00:00\",\n          \"ba\": \"CAISO_NORTH\",\n          \"value\": 1048.4131919701972,\n          \"version\": \"3.2-1.0.0\"\n        },\n        {\n          \"point_time\": \"2022-12-19T19:00:00+00:00\",\n          \"ba\": \"CAISO_NORTH\",\n          \"value\": 1051.0880801214637,\n          \"version\": \"3.2-1.0.0\"},\n         ...<24/72 hours worth of datapoints>...\n      ]\n  }\n]\n```\n### To (v3 schema):\n#### Real time forecasts (`/v3/forecast`):\n```json\n{\n    \"data\": [\n       {\n          \"point_time\": \"2022-07-15T00:00:00+00:00\",\n          \"value\": 1048.4131919701972\n        },\n        {\n          \"point_time\": \"2022-07-15T00:05:00+00:00\",\n          \"value\": 1051.0880801214637\n         },\n         ...<1-72 hours worth of datapoints>...\n    ],\n \"meta\": {\n   \"data_point_period_seconds\": 300,\n    \"region\": \"CAISO_NORTH\",\n    \"warnings\":\n       [\n        {\n          \"type\": \"EXAMPLE_WARNING\",\n          \"message\": \"This is just an example\"\n        }\n       ],\n     \"signal_type\": \"co2_moer\",\n     \"model\":\n       {\n        \"date\": \"2023-03-01\"\n       },\n     \"units\": \"lbs_co2_per_mwh\",\n     \"generated_at_period_seconds\": 300,\n     \"generated_at\": \"2022-07-15T00:00:00+00:00\"\n }\n}\n```\n\n#### Historical forecasts (`/v3/forecast/historical`):\n\n```json\n{\n  \"data\": [\n    {\n            \"generated_at\": \"2022-07-15T00:00:00+00:00\",\n            \"forecast\": [\n        {\n                   \"point_time\": \"2022-07-15T00:00:00+00:00\",\n                   \"value\": 870\n              },\n                 ...<24/72 hours worth of datapoints>...\n              {\n                   \"point_time\": \"2022-07-15T23:55:00+00:00\",\n                   \"value\": 870\n              }\n             ]\n    },\n    ...<other requested forecasts>...\n ],\n  \"meta\": {\n        \"data_point_period_seconds\": 300,\n        \"region\": \"CAISO_NORTH\",\n        \"warnings\": [\n              {\n                  \"type\": \"EXAMPLE_WARNING\",\n                  \"message\": \"This is just an example\"\n              }\n        ],\n        \"signal_type\": \"co2_moer\",\n        \"model\": {\n              \"date\": \"2023-03-01\"\n        },\n        \"units\": \"lbs_co2_per_mwh\",\n        \"generated_at_period_seconds\": 300\n  }\n}\n```\n\n# Data\nHistorical data can be updated post-hoc if WattTime receives higher quality upstream data, and correspondingly is not guaranteed to be produced without delay like forecasts. These data points should be used primarily for historical analysis and not for real time optimization.\n\n### From (`/v2/data` schema):\n```json\n[\n    {\"point_time\": \"2022-11-17T04:45:00.000Z\", \"value\": 937.0, \"frequency\": 300, \"market\": \"RTM\", \"ba\": \"CAISO_NORTH\", \"datatype\": \"MOER\", \"version\": \"3.2\"},\n    {\"point_time\": \"2022-11-17T04:40:00.000Z\", \"value\": 937.0, \"frequency\": 300, \"market\": \"RTM\", \"ba\": \"CAISO_NORTH\", \"datatype\": \"MOER\", \"version\": \"3.2\"},\n    {\"point_time\": \"2022-11-17T04:35:00.000Z\", \"value\": 937.0, \"frequency\": 300, \"market\": \"RTM\", \"ba\": \"CAISO_NORTH\", \"datatype\": \"MOER\", \"version\": \"3.2\"},\n    {\"point_time\": \"2022-11-17T04:30:00.000Z\", \"value\": 937.0, \"frequency\": 300, \"market\": \"RTM\", \"ba\": \"CAISO_NORTH\", \"datatype\": \"MOER\", \"version\": \"3.2\"}\n]\n```\n\n\n### To (v3 schema):\n```json\n{\n  \"data\": [\n        {\n            \"point_time\": \"2022-07-15T00:00:00+00:00\",\n            \"value\": 870\n        },\n        {\n            \"point_time\": \"2022-07-15T00:05:00+00:00\",\n            \"value\": 860\n        }\n  ],\n  \"meta\": {\n        \"data_point_period_seconds\": 300,\n        \"region\": \"CAISO_NORTH\",\n        \"warnings\": [\n            {\n                \"type\": \"EXAMPLE_WARNING\",\n                \"message\": \"This is just an example\"\n            }\n        ],\n        \"signal_type\": \"co2_moer\",\n        \"model\": {\n            \"type\": \"binned_regression\",\n            \"date\": \"2023-03-01\"\n        },\n        \"units\": \"lbs_co2_per_mwh\"\n  }\n}\n```\n\n# Avgemissions\nAverage emissions have been rolled into the standard data path under the signal_type `co2_aoer`. The schema matches the above schema for `/v3/historical` data. In order to distinguish between true and modeled data points, there is a new query parameter include_imputed_marker that will distinguish point-wise between data points that were generated with imputed data (imputed_data_used=true, equivalent to the old 3.0-modeled version).\n\n### From (v2 schema):\n```json\n[\n  {\n     \"point_time\": \"2023-10-26T14:00:00+00:00\",\n          \"datatype\": \"AOER\",\n          \"frequency\": 3600,\n          \"ba\": \"IT\",\n          \"value\": 1267.717268507,\n          \"version\": \"3.0\"\n    },\n  {\n     \"point_time\": \"2023-10-26T15:00:00+00:00\",\n          \"datatype\": \"AOER\",\n          \"frequency\": 3600,\n          \"ba\": \"IT\",\n          \"value\": 1267.717268507,\n          \"version\": \"3.0-modeled\"\n    }\n]\n```\n\n### To (v3 schema):\n```\n{\n  \"data\": [\n        {\n            \"point_time\": \"2023-10-26T14:00:00+00:00\",\n            \"value\": 1267.717268507,\n            \"imputed_data_used\": false\n        },\n        {\n            \"point_time\": \"2023-10-26T14:00:00+00:00\",\n            \"value\": 1267.717268507,\n            \"imputed_data_used\": true\n        }\n  ],\n  \"meta\": {\n        \"data_point_period_seconds\": 3600,\n        \"region\": \"CAISO_NORTH\",\n        \"warnings\": [\n            {\n                \"type\": \"EXAMPLE_WARNING\",\n                \"message\": \"This is just an example\"\n            }\n        ],\n        \"signal_type\": \"co2_aoer\",\n        \"model\": {\n            \"type\": \"average\",\n            \"date\": \"2023-03-01\"\n        },\n        \"units\": \"lbs_co2_per_mwh\"\n  }\n}\n```\n\n# ba-from-loc\nRegion requests from latitude/longitude pairs are also now specific to a `signal_type` (and require this parameter in each query).\n\n\nExample (python):\n```python\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\nlat, lon = 41.5, -104  # SPP_WESTNE\nSIGNAL = 'co2_moer'\n\n\nregion_url = 'https://api.watttime.org/v3/region-from-loc'\nheaders = {'Authorization': f'Bearer {token}'}\nparams = {'latitude': f'{lat}',\n          'longitude': f'{lon}',\n          'signal_type': SIGNAL\n         }\nrsp=requests.get(region_url, headers=headers, params=params)\nprint(rsp)\nprint(rsp.text)\n\n\nResponse:\n<Response [200]>\n{\"abbrev\":\"SPP_WESTNE\",\"name\":\"SPP Western Nebraska\"}\n```\n\n# maps\nMaps are now specific to a `signal_type` (and require this parameter in each query). The associated `signal_type` is included in the meta field in the response.\n\n\nExample (python)\n```python\nimport requests\nfrom os import path\n\nSIGNAL = 'co2_moer'\n\nparams = {'signal_type': SIGNAL}\nurl = 'https://api.watttime.org/v3/maps'\nheaders = {'Authorization': 'Bearer {}'.format(token)}\nrsp=requests.get(url, headers=headers, params=params)\n\n\ncur_dir = path.dirname(path.realpath('__file__'))\nfile_path = path.join(cur_dir, f'wt_map_{SIGNAL}.geojson')\nwith open(file_path, 'wb') as fp:\n    fp.write(rsp.content)\n\n\nprint(rsp)\nprint(f'Wrote /maps geojson to {file_path}')\n```\n\n\n# access\nThis endpoint is a guide to what is available to your account on the API. It provides a hierarchical JSON output that describes the signals, regions, endpoints, and model-dates and any available associated meta data for available data (in that hierarchical order).\n\n\nExample (python)\n```python\nmyaccess_url = 'https://api.watttime.org/v3/my-access'\nheaders = {'Authorization': 'Bearer {}'.format(token)}\nrsp = requests.get(myaccess_url, headers=headers)\n\n\n# print(rsp.text)\nfrom IPython.display import JSON\nJSON(rsp.text)\n```\n"
    },
    {
      "name": "Technical Support",
      "description": "For technical questions related to this API and real-time emissions data, please contact support@WattTime.org\n\nIf you are experiencing an outage, please check the WattTime API Status Page to get the status of known outages, and if none are shown, please proceed to contact support@WattTime.org\n\n✅ **For the fastest resolution of your issue, please also include the following along with your inquiry:**\n* HTTP error codes received\n* The code snippet for your query/API request\n* Any relevant screen capture images\n* A short description of what you are trying to accomplish\n* Is this the first attempt? Or, a new error for something that used to work?\n"
    }
  ]
}
